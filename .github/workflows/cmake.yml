name: CMake

on:
  push:
    branches: 
      - master
    paths-ignore:
      - 'build/**'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'build/**'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
    runs-on: ${{ matrix.platform.os }} # VM
    container: ubuntu:latest # Docker container

    strategy:
      fail-fast: false
      matrix:
        platform:
        #- { name: Windows VS2017, os: windows-2016   }
        #- { name: Windows VS2019, os: windows-latest }
        - { name: Linux GCC,      os: ubuntu-latest  }
        - { name: Linux Clang,    os: ubuntu-latest, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        #- { name: MacOS XCode,    os: macos-latest   }
        config:
        - { name: Release, flags: -DCMAKE_BUILD_TYPE=Release }
        - { name: MinSizeRel, flags: -DCMAKE_BUILD_TYPE=MinSizeRel }
        - { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug }
        - { name: Coverage, flags: -DCMAKE_BUILD_TYPE=Coverage }
        #- { name: Shared, flags: -DBUILD_SHARED_LIBS=TRUE }
        #- { name: Static, flags: -DBUILD_SHARED_LIBS=FALSE }

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: apt-get update -y && apt-get install cmake -y #clang g++ ninja-build libboost-all-dev openssl libomp-dev libopencv-dev libssl-dev openssl libsfml-dev nvidia-cuda-dev nvidia-cuda-toolkit freeglut3-dev qt5-default qtmultimedia5-dev qtbase5-dev-tools qtdeclarative5-dev mesa-common-dev libpcap-dev lld ocl-icd-opencl-dev ocl-icd-libopencl1 opencl-headers -y

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: ls ${{github.workspace}}

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12 -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      run: cmake -G Ninja $GITHUB_WORKSPACE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>" --config $BUILD_TYPE
      run: ninja #cmake --build . --parallel

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
    - name: CPack
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute cpack to build packages
      run: cpack
