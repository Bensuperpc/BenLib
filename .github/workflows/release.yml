#https://emojipedia.org/search/?q=magnifying+glass


name: Release Maker

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
      #- 'v*'

#  create:
#    tags:
#    - 'v[0-9]+.[0-9]+.[0-9]+*'
#https://github.community/t/start-a-github-workflow-on-a-tag-name-and-build-based-on-that-specific-tag/16992/2


jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: "🚀 Release Maker"
    runs-on: ubuntu-latest

    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v2.2.0
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: "📥 Install Linux Dependencies"
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install ninja-build openssl libomp-dev libopencv-dev libssl-dev openssl libsfml-dev nvidia-cuda-dev nvidia-cuda-toolkit nvidia-cuda-toolkit-gcc freeglut3-dev qt5-default qtmultimedia5-dev qtbase5-dev-tools qtdeclarative5-dev mesa-common-dev libpcap-dev lld ocl-icd-opencl-dev ocl-icd-libopencl1 opencl-headers libboost-all-dev doxygen doxygen-latex graphviz

    - name: "✍🏽 Create Build Environment"
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: "🔧 Configure CMake"
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12 -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      run: cmake -G Ninja $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=../toolchain/toolchain_x86_64_linux_clang.cmake

    - name: "🛠️ Build"
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>" --config $BUILD_TYPE
      run: ninja

    - name: "✅ Run Test"
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

      # Build packages
    - name: "📦 Make CPack"
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute cpack to build packages
      run: cpack

    - name: "🔍 Get previous tag"
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"

    - name: "📋 Changelog"
      uses: scottbrenner/generate-changelog-action@master
      id: Changelog

      # Create Draft Release
    - name: "📦 Create Draft Release"
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.previoustag.outputs.tag }}
        release_name: Release Clang ${{ steps.previoustag.outputs.tag }} #${{ steps.tag_version.outputs.previous_tag }} #Release ${{ github.ref }} #Release ${{ steps.tag_version.outputs.new_tag }} #build-$(date +%Y%m%d-%H%M%S) #$(basename "${{ github.ref }}")
        body: |
            ${{ steps.Changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: "📤 Upload Release Assets"
      id: upload-release-assets
      uses: dwenegar/upload-release-assets@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
        assets_path: ${{github.workspace}}/build/package