name: Build test

on:
  push:
    branches: 
      - master
    paths-ignore:
      - 'build/**'
      - '**.md'
      - 'appveyor.yml'
  pull_request:
    #types: [closed]
    branches:
      - master
    paths-ignore:
      - 'build/**'
      - '**.md'
      - 'appveyor.yml'

#env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }} #${{ matrix.arch.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        #- { name: Windows VS2017, os: windows-2016   }
        #- { name: Windows VS2019, os: windows-latest }
        - { name: Linux GCC x86_64,      os: ubuntu-latest, flags: -DCMAKE_TOOLCHAIN_FILE=../toolchain/toolchain_x86_64_linux_gcc.cmake }
        - { name: Linux Clang x86_64,    os: ubuntu-latest, flags: -DCMAKE_TOOLCHAIN_FILE=../toolchain/toolchain_x86_64_linux_clang.cmake }
        #- { name: MacOS XCode,    os: macos-latest   }
        config:
        - { name: Release, flags: -DCMAKE_BUILD_TYPE=Release }
        - { name: MinSizeRel, flags: -DCMAKE_BUILD_TYPE=MinSizeRel }
        - { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug }
        - { name: Coverage, flags: -DCMAKE_BUILD_TYPE=Coverage }
        #- { name: Shared, flags: -DBUILD_SHARED_LIBS=TRUE }
        #- { name: Static, flags: -DBUILD_SHARED_LIBS=FALSE }

        #arch:
        #- { name: ARM64, flags: -DCMAKE_BUILD_TYPE=Coverage }
        #include:
        #- platform: { name: ARM, os: ubuntu-latest } #aarch64-linux-gnu-gcc -march=native
        #  config: { name: ARM64 GCC, flags: -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++}

    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v2.2.0
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: "üì• Install Linux Dependencies"
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install ninja-build openssl libomp-dev libopencv-dev libssl-dev openssl libsfml-dev nvidia-cuda-dev nvidia-cuda-toolkit nvidia-cuda-toolkit-gcc freeglut3-dev qt5-default qtmultimedia5-dev qtbase5-dev-tools qtdeclarative5-dev mesa-common-dev libpcap-dev lld ocl-icd-opencl-dev ocl-icd-libopencl1 opencl-headers libboost-all-dev doxygen

    - name: "üì• Install ARM64 Components"
      if: matrix.platform.name == 'ARM'
      run: sudo apt-get update && sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu

    - name: "‚úçüèΩ Create Build Environment"
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: "üîß Configure CMake"
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake -G Ninja $GITHUB_WORKSPACE ${{matrix.platform.flags}} ${{matrix.config.flags}} #${{matrix.arch.flags}}

    - name: "üõ†Ô∏è Build"
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>" --config $BUILD_TYPE
      run: ninja #cmake --build . --parallel

    - name: "‚úÖ Run Test"
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE

      # Build packages
    - name: "üì¶ Make CPack"
      if: matrix.config.name == 'Release'
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute cpack to build packages
      run: cpack